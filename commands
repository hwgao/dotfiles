cd ~/work
cd ~/work/rootfs
cd ~/work/rdk-mstar
cd ~/work/linaro_3.18_dev/
cd ~/work/rdk-mstar/build-mstark6/tmp/work/mstark6-rdk-linux-gnueabi/rdk-generic-hybrid-tdk-image/1.0-r0/rootfs/ # RDK rootfs
cd meta-mstar-bsp/recipes-extended/devicesetting/devicesettings-hal-mstar-1.0/mstark6/devicesettings-hal-mstar-1.0/
cd ~/dotfiles
vi ~/work/rdk-mstar/meta-cmf/conf/distro/include/rdk-external-src.inc
vi /home/hongwei/.vimbuffer
vi ~/.commands
cat ~/.vimbuffer
i=$(find . | fzf) && [[ -d "${i}" ]] && cd "${i}" || vi "${i}"
git --git-dir=.repo/manifests/.git/ branch -a                           # List repo branches
git --git-dir=.repo/manifests/.git branch -v;ll .repo/manifest.xml      # Repo current branch
git archive --format=tar.gz -o onebsp-$(date -I).tar.gz HEAD
git fetch && git reset --hard origin/master
git reset --hard HEAD~1                 # Delete last commit, the change in last commit will be deleted
git log --tags --simplify-by-decoration --pretty="format:%ci %d"
git commit --no-verify .                # Not run pre-commit hook
git diff --cached --check --no-ext-diff
repo forall -c "echo "===================================" && pwd && git reset --hard && git clean -dfx && git status"
GOOS=linux GOARCH=arm GOARM=7 go build
python -c 'print u"\u22c5 \u22c5\u22c5 \u201d \u2019 \u266f \u2622 \u260d \u2318 \u2730 \u28ff \u26a1 \u262f \u2691 \u21ba \u2934 \u2935 \u2206 \u231a \u2240\u2207 \u2707 \u26a0\xa0\u25d4 \u26a1\xa0\u21af \xbf \u2a02 \u2716 \u21e3 \u21e1  \u2801 \u2809 \u280b \u281b \u281f \u283f \u287f \u28ff \u2639 \u2780 \u2781 \u2782 \u2783 \u2784 \u2785 \u2786 \u2787 \u2788 \u2789 \u25b9\xa0\u254d \u25aa \u26af \u2692 \u25cc \u21c5 \u21a1 \u219f \u229b \u267a ".encode("utf8")' # Check if can show glyphs properly
uzbl -u 0daydown.com &
uzbl -u my.jdownloader.org &
python -c "import sys, random; stdout = sys.stdout; sys.stdout = type('BlackHole', (), {'write': (lambda self, string: '')})(); import this; sys.stdout = stdout; print random.choice(''.join([this.d.get(i, i) for i in this.s]).splitlines()[2:]);" | cowsay | lolcat
fortune | cowsay | lolcat
compgen -c                                                                                        # List all the binaries you could run.
compgen -a                                                                                        # List all the aliases you could run.
compgen -b                                                                                        # List all the built-ins you could run.
compgen -k                                                                                        # List all the keywords you could run.
compgen -A function                                                                               # List all the functions you could run.
compgen -A function -abck                                                                         # List all the above in one go.
sudo pdbedit -L -v                                                                                # List Samba Users -L to list all users, -v to be verbose
docker rm $(docker ps -a -q)                                                                      # Docker: delete all the containers
docker rmi $(docker images -q)                                                                    # Docker: delete all the images
docker volume rm $(docker volume list -q)                                                         # Docker: delete all the volumes
docker images                                                                                     # Docker: list images
docker ps                                                                                         # Docker: list running containers
docker ps -a                                                                                      # Docker: list all containers
docker top  $(docker ps | fzf | awk '{print $1}')                                                 # Docker: See the top processes within a container
docker stats $(docker ps | fzf | awk '{print $1}')                                                # Docker: Provide the statistics of a running container
docker start  $(docker ps | fzf | awk '{print $1}')                                               # Docker: Stop a running container
docker stop  $(docker ps | fzf | awk '{print $1}')                                                # Docker: Stop a running container
docker rm $(docker ps -a | fzf | awk '{print $1}')                                                # Docker: Delete a container
docker rmi $(docker images | fzf | awk '{print $3}')                                              # Docker: Delete a image
docker attach $(docker  ps | fzf | awk '{print $1}')                                              # Docker: Attach to a container
docker pause $(docker ps | fzf | awk '{print $1}')                                                # Docker: Pause the processes in a running container
docker unpause $(docker ps | fzf | awk '{print $1}')                                              # Docker: Unpause the processes in a running container
docker kill $(docker ps | fzf | awk '{print $1}')                                                 # Docker: Kill the processes in a running container
make -pn | less                                                                                   # Make: detail information
make -p -f /dev/null                                                                              # Make: Print make data base
make -qp | awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}' # Make: list all targets
pkg-config --variable=pc_path pkg-config                                                          # pkg-config: list directories where to search *.pc files
pkg-config --libs --cflags ${_P_}                                                                 # pkg-config: Show link path and c flags
for user in $(cut -f1 -d: /etc/passwd); do echo $user; sudo crontab -u $user -l; done             # List all cron jobs for allusers
ps aux | grep ${_P_} | grep -v grep                                                               # Grep an app
find . -type d -empty -delete                                                                     # Delete all empty subfolders
find -name "*.m4a" -exec mv -t ~/Music {} +                                                       # Move all m4a files to Music folder
bitbake -g ${_P_} && cat pn-depends.dot | grep -v -e '-native' | grep -v digraph | grep -v -e '-image' | awk '{print $1}' | sort | uniq | less  # Show image's packages, or package's dependencies
bitbake -s | grep ${_P_}                    # Check if certain package is present on current Yocto Setup
bitbake -v ${_P_} 2>&1 | tee ${_P_}.log     # Print (on console) and store verbose baking
bitbake ${_P_} -c fetchall                  # Fetch sources for a particular image
bitbake ${_P_} -c listtasks                 # List all tasks for package
bitbake ${_P_} -g -u depexp                 # Show the package dependency for image (Will open a UI window)
bitbake-layers show-layers                  # Show layers
bitbake-layers show-recipes "*-image-*"     # Show possiable images to bake. Without "*-image-*", it shows ALL recipes
